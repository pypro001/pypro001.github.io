<html>

    <code>

       // prec 9
       ||implement SSL.||
       Code:- JavaSSLServer.java
package javasslserver;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLServerSocketFactory;
public class JavaSSLServer {
 
 static final int port = 8000;
 public static void main(String[] args) {
 SSLServerSocketFactory sslServerSocketFactory = 
 (SSLServerSocketFactory)SSLServerSocketFactory.getDefault();
 
 try {
 ServerSocket sslServerSocket = 
 sslServerSocketFactory.createServerSocket(port);
 System.out.println("SSL ServerSocket started");
 System.out.println(sslServerSocket.toString());
 Socket socket = sslServerSocket.accept();
 System.out.println("ServerSocket accepted");
 
 PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
 try (BufferedReader bufferedReader = 
 new BufferedReader(
 new InputStreamReader(socket.getInputStream()))) {
 String line;
 while((line = bufferedReader.readLine()) != null){
 System.out.println(line);
 out.println(line);
 }
 }
 System.out.println("Closed");
 
 } catch (IOException ex) {
 Logger.getLogger(JavaSSLServer.class.getName())
 .log(Level.SEVERE, null, ex);
 }
 }
 
}
------------------------------------------------
Code:-JavaSSLClient.java
package javasslclient;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLSocketFactory;
/**
 *
 * @author om
 */
public class JavaSSLClient {
 
 static final int port = 8000;
 public static void main(String[] args) {
 
 SSLSocketFactory sslSocketFactory = 
 (SSLSocketFactory)SSLSocketFactory.getDefault();
 try {
 Socket socket = sslSocketFactory.createSocket("localhost", port);
 PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
 try (BufferedReader bufferedReader = 
 new BufferedReader(
 new InputStreamReader(socket.getInputStream()))) {
 Scanner scanner = new Scanner(System.in);
 while(true){
 System.out.println("Enter something:");
 String inputLine = scanner.nextLine();
 if(inputLine.equals("q")){
 break;
 }
 
 out.println(inputLine);
 System.out.println(bufferedReader.readLine());
 }
 }
 
 } catch (IOException ex) {
 Logger.getLogger(JavaSSLClient.class.getName())
 .log(Level.SEVERE, null, ex);
 }
 
 }
 
}
---------------------------------
STEP 1: To get the output first we need to create KeyStore using the below command in cmd C:\Users\Rohit>keytool -genkey -alias signFiles -keystore testStr

STEP 2: Now in cmd write the below command and give the jar file path of server file (toget the jar file path build the project then copy the path from there i.e. given below:-)

C:\Users\Rohit>java -jar -Djavax.net.ssl.keyStore=testStr Djavax.net.ssl.keyStorePassword=password "C:\Users\Rohit\Documents\NetBeansProjects\SSLServer\dist\SSLServer.jar"

STEP 3:Now open another cmd & write the below command and give the jar file path of client file (to get the jar file path build the project then copy the path from there i.e. givenbelow

C:\Users\Rohit>java -jar -Djavax.net.ssl.trustStore=testStr -Djavax.net.ssl.trustStorePassword=password "C:\Users\Rohit\Documents\NetBeansProjects\SSLClient\dist\SSLClient.jar"


    </code>

</html>
