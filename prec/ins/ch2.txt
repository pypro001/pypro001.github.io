<html>

    <code>

       // prec 2.1
     Vernam Cipher-||
package vernamcipher;
import java.util.Scanner;


public class Vernamcipher {
 String alpha="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 String ct="";
 public String Encryption(String p,String k)
 {
 p=p.toUpperCase();
 k=k.toUpperCase();
 if(p.length()==k.length())
 {
for(int i=0;i<p.length();i++)
 {
 char ch=p.charAt(i);
 int pos=alpha.indexOf(ch);

 char ch1=k.charAt(i);
 int pos1=alpha.indexOf(ch1);

 int add=(pos+pos1)%26;
ct+=alpha.charAt(add);
 }
 }
 else
 {
System.out.println("Length of key and plaintext should be same");
 }
 return ct; 
 }
 public String Decryption(String ct,String k)
 {
 String p="";
 k=k.toUpperCase();
 if(k.length()==ct.length())
 {
for(int i=0;i<ct.length();i++)
 {
 char ch=ct.charAt(i);
 int pos=alpha.indexOf(ch);
 //System.out.println(pos);

 char ch1=k.charAt(i);
 int pos1=alpha.indexOf(ch1);
 //System.out.println(pos1);


 int add=(pos-pos1);
 //System.out.println(add);
 if(add<0)
 add=26+add;
 p+=alpha.charAt(add);
 }
 }
 else
 {
System.out.println("Length of key and plaintext should be same");
 }
 return p;
 }


    
    public static void main(String[] args) {
System.out.println("IMPLEMENTATION OF VERNAM CIPHER");
 Scanner sc=new Scanner(System.in);
System.out.println("Enter the plaintext: ");
 String p=sc.next();
System.out.println("Enter the key(equals to plaintext): ");
 String k=sc.next();
Vernamcipher v=new Vernamcipher();
 String ct=v.Encryption(p, k);
System.out.println("Encryption");
System.out.println("Ciphertext: "+ct);
 String pt=v.Decryption( ct, k);
System.out.println("Decryption");
System.out.println("Plaintext: "+pt);
 }
 }

--------------------------------------
//prec 2.2
Playfair cipher-||
package playfaircipher;
import java.util.Scanner;
import java.util.*;

public class Playfaircipher {
public static String removeCharAt(String s, int pos) {
      return s.substring(0, pos) + s.substring(pos + 1);
       }
char[][] setKey()//String k)
    {
        int i,j;
        String k="MONARCHY";

        String Alp="ABCDEFGHJKLMNOPQRSTUVWXYZ";
        String AlpRem=Alp;
        //key expansion
        for(i=0;i<k.length();i++)
        {
            for(j=0;j<Alp.length();j++)
            {

            if(k.charAt(i)==Alp.charAt(j))
            {
                Alp=Alp.substring(0, j) + Alp.substring(j + 1);
                //Alp=removeCharAt(Alp, j);
            //System.out.println(Alp);
            }
            }
            //System.out.println(AlpRem);
        }
        k=k+Alp;
            //System.out.println(k);
         //matric formation
        char keyM[][]=new char[5][5];
        int cur=0;
for(int row=0;row<5;row++)
        {
            //System.out.println(cur);=
for(int col=0;col<5;col++)
            {
keyM[row][col]=k.charAt(cur);
                cur++;
                //System.out.println(cur);
            }

        }
for(int row=0;row<5;row++)
        {
for(int col=0;col<5;col++)
            {
System.out.print(keyM[row][col]);
            }
System.out.println("");

        }
        return keyM;
        }
    String encrypt(String pt,char key[][])
    {
        String cipherText="";
        int i,j,char1RN,char1CN,char2RN,char2CN,counter;
        char1RN=char1CN=char2RN=char2CN=0;
        String block="";
        if((pt.length()%2)!=0)
        {
pt+="x";
System.out.println(pt);
        }
        for(counter=0;counter<pt.length();counter+=2)
        { 
            //System.out.println(""+i);
            //if(i<=pt.length())
            block=pt.substring(counter,counter+2);
        char blArr[]=block.toUpperCase().toCharArray();
System.out.println(block);

for(i=0;i<5;i++)
        {
            for(j=0;j<5;j++)
            {
                 if(blArr[0]==key[i][j])
                 {
                 char1RN=i;
                 char1CN=j;
                 }
                 if(blArr[1]==key[i][j])
                 {
                 char2RN=i;
                 char2CN=j;
                 }
          //       System.out.println("char1RN:"+char1RN+"char1CN:"+char1CN);
            //     System.out.println("char2RN:"+char2RN+"char2CN:"+char2CN);
            }

        }
        if(char1RN==char2RN)//if both the character in same row MA=OR
        {

blArr[0]=key[char1RN][((char1CN+1)%5)];
blArr[1]=key[char2RN][((char2CN+1)%5)];
            //System.out.println(blArr);
        }
        else if(char1CN==char2CN)//if both the character in same row
        {
blArr[0]=key[((char1RN+1)%5)][char1CN];
blArr[1]=key[((char2RN+1)%5)][char2CN];
            //System.out.println(blArr);
        }
        else//Otherwise, each letter is replaced by the one in its row in the column of the other letter of the pair.
        {
blArr[0]=key[char1RN][char2CN];
blArr[1]=key[char2RN][char1CN];
            //System.out.println(blArr);
        }

cipherText+=blArr.toString();
System.out.println(blArr);
        }
System.out.println(cipherText);
        return(cipherText);
    }

    public static void main(String arg[])
    {
Playfaircipher pf=new Playfaircipher();
     char keyM[][]=pf.setKey();   
     String pt="balxlon";
System.out.println("Implementation of Playfair Cipher");
System.out.println(pf.encrypt(pt,keyM));
    }
    }




    </code>

</html>
