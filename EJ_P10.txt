Practical No. 10

Theory:
The Java Persistence API (JPA) is a specification of Java.
 It is used to persist data between Java object and relational database.
JPA acts as a bridge between 
object-oriented domain models and relational database systems.
As JPA is just a specification, it doesn't perform any operation by itself. 
It requires an implementation. So, ORM tools like Hibernate, 
TopLink and EclipseLink implements JPA specifications for data persistence

Part A:
Aim: Develop a Guestbook Application Using JPA.
Files Used:
index.jsp
GuestBookView.jsp
GuestBook.java
Code:
SQL Queries:
mysql>create database GuestBook;
mysql>use GuestBook;
mysql>create table GuestBook( VisitorNo Int PRIMARY KEY AUTO_INCREMENT,
VisitorName varchar(50), Message varchar(100), MessageDate varchar(40));
index.jsp
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<body style="background-color: greenyellow;">
<h1>Sign the Guest Book <h1>
<br> <br>
<form action="GuestBookView.jsp" method="post">
Visitor Name: <input name="guest" maxlength="25" size="50" /> <br> <br>
Message: <textarea rows="5" cols="36" name="message"></textarea> <br> <br>
<input type="submit" name="btnSubmit" value="Submit" />
</form>
</body>
</html>
GuestBookView.jsp
<%@page import="java.util.*,javax.persistence.*, myApp.GuestBook" %>
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<%!
private EntityManagerFactory entityManagerFactory;
private EntityManager entityManager;
private EntityTransaction entityTransaction;
List<GuestBook> guestbook;
%>
<%
entityManagerFactory = Persistence.createEntityManagerFactory("JPAApplication1PU");
entityManager = entityManagerFactory.createEntityManager();
String submit = request.getParameter("btnSubmit");
if(submit != null && ("Submit").equals(submit)) {
try {
String guest = request.getParameter("guest");
String message = request.getParameter("message");
String messageDate = new java.util.Date().toString();
GuestBook gb = new GuestBook();
gb.setVisitorName(guest);
gb.setMessage(message);
gb.setMessageDate(messageDate);
entityTransaction = entityManager.getTransaction();
entityTransaction.begin();
entityManager.persist(gb);
entityTransaction.commit();
} catch (RuntimeException e) {
if(entityTransaction != null) entityTransaction.rollback();
throw e;
}
response.sendRedirect("GuestBookView.jsp");
}
try {
guestbook = entityManager.createQuery("SELECT g from GuestBook g").getResultList();
} catch (RuntimeException e) { }
entityManager.close();
%>
<html>
<body>
View the Guest Book <b>Click <a href="index.jsp"> here</a> to sign the guestbook.</b>
<hr />
<%
Iterator iterator = guestbook.iterator();
while (iterator.hasNext()) {
GuestBook obj = (GuestBook) iterator.next();
%>
On <%= obj.getMessageDate() %>,<br />
<b><%= obj.getVisitorName() %>:</b>
<%= obj.getMessage() %>
<br /><br />
<%
}
%>
</body>
</html>
GuestBook.java
package myApp;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
@Entity
@Table(name="GuestBook")
public class GuestBook implements java.io.Serializable {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
@Column(name="VisitorNo", unique=true, updatable=false)
private Integer visitorNo;
@Column(name="VisitorName")
private String visitorName;
@Column(name="Message")
private String message;
@Column(name="MessageDate")
private String messageDate;
public GuestBook() {
}
public Integer getVisitorNo() {
return visitorNo;
}
public void setVisitorNo(Integer visitorNo) {
this.visitorNo = visitorNo;
}
public String getVisitorName() {
return visitorName;
}
public void setVisitorName(String visitorName) {
this.visitorName = visitorName;
}
public String getMessage() {
return message;
}
public void setMessage(String message) {
this.message = message;
}
public String getMessageDate() {
return messageDate;
}
public void setMessageDate(String messageDate) {
this.messageDate = messageDate;
}
}


Part B:
Aim: Develop a Hibernate application to store Feedback of Website Visitor in MySQL Database.
Files Used:
index.jsp
ViewFeedback.jsp
Feedback.java
Code:
index.jsp
<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head><title>Feedback Form</title></head>
<body>
<h3> Please Enter our Feedback Here:</h3>
<form action="ViewFeedback.jsp" method="post">
<table border="0" cellpadding="0" cellspacing="2">
<tr><td align="right"> User Name:</td>
<td><input name="username" maxlength="25" size="47" /></td></tr>
<tr><td align="right"> E Mail:</td>
<td><input name="email" maxlength="25" size="47" /></td></tr>
<tr><td align="right">Feedback:</td>
<td><textarea rows="5" cols="40" name="feedback"></textarea></td></tr>
<tr><td colspan="2" align="right">
<input type="submit" name="btnSubmit" value="Submit" />
</td></tr></table></form></body></html>
ViewFeedback.jsp
<%@page contentType="text/html" pageEncoding="UTF-8" import="org.hibernate.SessionFactory, org.hibernate.cfg.Configuration,
org.hibernate.Session, org.hibernate.Transaction, java.util.List, java.util.Iterator,hibernate.Feedback" %>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<%!
SessionFactory sessionFactory;
org.hibernate.Session myHbSession;
List<Feedback> feedbackList;
%>
<% sessionFactory = new Configuration().configure().buildSessionFactory();
myHbSession = sessionFactory.openSession();
Transaction tx = null;
String submit = request.getParameter("btnSubmit");
if(submit != null && ("Submit").equals(submit)) {
Feedback fb = new Feedback();
try {
tx = myHbSession.beginTransaction();
String username = request.getParameter("username");
String feedback = request.getParameter("feedback");
String email = request.getParameter("email");
String feedbackDate = new java.util.Date().toString();
fb.setuserName(username);
fb.setFeedback(feedback);
fb.setEmail(email);
fb.setfeedbackDate(feedbackDate);
myHbSession.save(fb);
tx.commit();
}
catch (RuntimeException e) {
if(tx != null) tx.rollback();
throw e;
}
response.sendRedirect("ViewFeedback.jsp");
}
try {
myHbSession.beginTransaction();
feedbackList = myHbSession.createQuery("from Feedback").list();
}
catch (RuntimeException e) {
throw e;
}
myHbSession.close();
%>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1">
<title>Feedback</title>
</head>
<body bgcolor="Yellow">
<table border="0" cellpadding="0" cellspacing="0" align="center" width="760">
<tr> <td><table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr><td width="60%" valign="top" align="left">View the Feedbacks</td>
<td align="right"><b>Click <a href="index.jsp"> here</a> to Write our Feedback.</b></td>
</tr></table></td></tr>
<tr align="left"><td height="20"><hr /> </td> </tr>
<tr><td>
<table align="center" width="100%">
<%
Iterator iterator = feedbackList.iterator();
while (iterator.hasNext()) {
Feedback objfb = (Feedback)iterator.next();
%>
<tr><td> On <%=objfb.getfeedbackDate()%>,<br /> <b><%=objfb.getuserName()%>:</b>
<%=objfb.getFeedback()%><br /><br /></td></tr>
<%
}
%>
</table></td> </tr>
</table> </body> </html>
Feedback.java
package hibernate;
public class Feedback implements java.io.Serializable {
private Integer userNo;
private String userName;
private String Email;
private String feedbackDate;
private String Feedback;
public Feedback() {
}
public Feedback(String userName, String Feedback, String feedbackDate) {
this.userName=userName;
this.feedbackDate=feedbackDate;
this.Feedback=Feedback;
}
public Integer getuserNo() {
return this.userNo;
}
public void setuserNo(Integer userNo) {
this.userNo = userNo;
}
public String getuserName() {
return this.userName;
}
public void setuserName(String userName) {
this.userName = userName;
}
public String getEmail() {
return this.Email;
}
public void setEmail(String Email) {
this.Email = Email;
}
public String getfeedbackDate() {
return this.feedbackDate;
}
public void setfeedbackDate(String feedbackDate) {
this.feedbackDate = feedbackDate;
}
public String getFeedback() {
return this.Feedback;
}
public void setFeedback(String Feedback) {
this.Feedback = Feedback;
}
}
SQL Queries:
mysql> create database Feedback;
Query OK, 1 row affected (0.03 sec)
mysql> use Feedback;
Database changed
mysql> create table Feedback(userno int PRIMARY KEY AUTO_INCREMENT, username varchar(50), email varchar(50), feedbackdate varchar(50), feedback varchar(200));
Query OK, 0 rows affected (0.03 sec)