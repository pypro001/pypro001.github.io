 
data flow diagram (DFD) is a graphical or visual representation using a standardized set of symbols and notations to describe a business's operations through data movement. They are often elements of a formal methodology such as Structured Systems Analysis and Design Method (SSADM).

<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

They use defined symbols, text labels, and varying levels of detail to display information. DFDs help non-technical audiences understand how data flows throughout a software system.

Gliffy is easy-to-use data flow diagram software that allows you to drag and drop shapes to make a DFD online. You can get started with a free trial or, to learn more about DFDs, read on or jump ahead to one of the following sections:

level 0
level 1
level 2


<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
pract -03

A use case diagram is a type of behavioral diagram in Unified Modeling Language (UML) that represents the interactions between users and a system or software application. It is a graphical representation of the system's functional requirements and shows the relationships between actors (users) and use cases (system functionalities).

he primary purpose of a use case diagram is to help stakeholders understand how the system or software application will be used in the real world


practi -07

A sequence diagram
is a graphical representation of the interactions between objects in a system or software application over time. It shows the order in which the interactions occur and the messages that are exchanged between the different objects. The sequence diagram includes several components such as lifelines, messages, activations, and interactions.

A collaboration diagram
is a graphical representation of the interactions between objects in a system or software application. It shows the objects involved in the interaction and the messages that are exchanged between them, but it does not show the order in which the interactions occur. The collaboration diagram includes several components such as objects, messages, and associations.


pract -12
White box testing and black box testing are two common types of testing techniques used in software testing.

White box testing, also known as clear box testing, is a testing technique that involves examining the internal structure of a software application, including the code and algorithms used to develop it. This type of testing is often performed by developers or testers who have access to the source code and understand how the software is built.

Black box testing, on the other hand, is a testing technique that focuses on the external behavior of a software application. This type of testing is often performed by testers who do not have access to the source code and do not have knowledge of the internal workings of the applicatio