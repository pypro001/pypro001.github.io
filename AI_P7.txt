PRACTICAL 7

PART A
Program to implement shuffling of cards in a deck.
import random
cardfaces=[]
suits=["Hearts", "Diamonds", "Clubs", "Spades"]
royals=["J", "Q", "K", "A"]
deck=[]
for i in range(2, 11):
cardfaces.append(str(i))
for j in range(4):
cardfaces.append(royals[j])
for k in range(4):
for m in range(13):
card=(cardfaces[m]+" of "+suits[k])
deck.append(card)
print("Before shuffle")
for n in range(52):
print(deck[n])
random.shuffle(deck)
print("\n")
print("Shuffle Deck of Cards")
for n in range(52):
print(deck[n])

PART B
Program to implement travelling salesman
from sys import maxsize
from itertools import permutations
V = 4
def travellingSalesmanProblem(graph, s):
vertex = []
for i in range(V):
if i != s:
vertex.append(i)
min_path = maxsize
next_permutation = permutations(vertex)
for i in next_permutation:
current_pathweight = 0
k = s
for j in i:
current_pathweight += graph[k][j]
k = j
current_pathweight += graph[k][s]
min_path = min(min_path, current_pathweight)
return min_path
if __name__ == "__main__":
graph = [[0, 10, 15, 20], [10, 0, 35, 25],
[15, 35, 0, 30], [20, 25, 30, 0]]
s = 0
print(travellingSalesmanProblem(graph, s))