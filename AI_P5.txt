PRACTICAL 5

PART A:
3 jugs problem
capacity=(12, 8, 5)
x=capacity[0]
y=capacity[1]
z=capacity[2]
memory={}
ans=[]
def get_all_states(state):
a=state[0]
b=state[1]
c=state[2]
if a==6 and b==6:
ans.append(state)
return True
if (a, b, c) in memory:
return False
memory[(a, b, c)]=1
if a>0:
if a+b<=y:
if get_all_states((0, a+b, c)):
ans.append(state)
return True
else:
if get_all_states((a-(y-b), y, c)):
ans.append(state)
return True
if a+c<=z:
if get_all_states((0, b, a+c)):
ans.append(state)
return True
else:
if get_all_states((a-(z-c), b, z)):
ans.append(state)
return True
if b>0:
if a+b<=x:
if get_all_states((a+b, 0, c)):
ans.append(state)
return True
else:
if get_all_states((x, b-(x-a), c)):
ans.append(state)
return True
if b+c<=z:
if get_all_states((a, 0, b+c)):
ans.append(state)
return True
else:
if get_all_states((a, b-(z-c), z)):
ans.append(state)
return True
if c>0:
if a+c<=x:
if get_all_states((a+c, b, 0)):
ans.append(state)
return True
else:
if get_all_states((x, b, c-(x-a))):
ans.append(state)
return True
if b+c<=y:
if get_all_states((a, b+c, 0)):
ans.append(state)
return True
else:
if get_all_states((a, y, c-(y-b))):
ans.append(state)
return True
return False
initial_state=(12, 0, 0)
print("Startng work...\n")
get_all_states(initial_state)
ans.reverse()
for i in ans:
print(i)

PART B:
To implement tic-tac-toe game.
import time
board=[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
player=1
win=1
Draw=-1
Running=0
stop=1
Game=Running
Mark='X'
def DrawBoard():
print(" {} | {} | {} ".format(board[1], board[2], board[3]))
print("____|____|____")
print(" {} | {} | {} ".format(board[4], board[5], board[6]))
print("____|____|____")
print(" {} | {} | {} ".format(board[7], board[8], board[9]))
def CheckPosition(pos):
if (board[pos]==" "):
return True
else:
return False
def CheckWin():
global Game
if board[1]==board[2] and board[2]==board[3] and board[1]!=' ':
Game=win
return
elif board[4]==board[5] and board[5]==board[6] and board[4]!=' ':
Game=win
return
elif board[7]==board[8] and board[8]==board[9] and board[7]!=' ':
Game=win
return
if board[1]==board[4] and board[4]==board[7] and board[1]!=' ':
Game=win
return
elif board[2]==board[5] and board[5]==board[8] and board[2]!=' ':
Game=win
return
elif board[3]==board[6] and board[6]==board[9] and board[3]!=' ':
Game=win
return
if board[1]==board[5] and board[5]==board[9] and board[5]!=' ':
Game=win
return
elif board[3]==board[5] and board[5]==board[7] and board[5]!=' ':
Game=win
return
elif board[1]!=' ' and board[2]!=' ' and board[3]!=' ' and board[4]!=' '
and board[5]!=' ' and board[6]!=' ' and board[7]!=' ' and board[8]!=' ' and
board[9]!=' ':
Game=Draw
return
else:
Game=Running
print("Tic-tac-toe game")
print("Player 1[X]--Player 2[O] \n")
print()
print("Please wait...")
time.sleep(1)
while Game==Running:
DrawBoard()
if player%2!=0:
print("Player 1's chance.")
Mark='X'
else:
print("Player 2's chance")
Mark='O'
choice=int(input("Enter position between 1-9 where you want to mark : "))
if CheckPosition(choice):
board[choice]=Mark
player+=1
CheckWin()
DrawBoard()
if Game==Draw:
print("Game draw!")
elif Game==win:
player-=1
if player%2!=0:
print("Player 1 won!")
else:
print("Player 2 won!")