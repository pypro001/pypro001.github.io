PRACTICAL 6

PART A
#include<iostream>
#include<conio.h>
#include<iomanip>
using namespace std;

int im = 3, ic = 3, i, j, fm = 0, fc = 0, status = 0, flag = 0, sel = 0;
void display(char bpass1, char bpass2)
{
 cout << "\n\n\n";
 for (int i = 0; i < fm; i++) { cout << " M "; } 
 for (int i = 0; i < fc; i++) { cout << " C "; } 
 if (flag == 0)
  cout << "     __________WATER___________<B0(" << bpass1 << "," << bpass2 << ")AT>  ";
 else
  cout << "     <BO(" << bpass1 << "," << bpass2 << ")AT>__________WATER___________  ";
 for (int i = 0; i < im; i++) { cout << " M "; } 
 for (int i = 0; i < ic; i++) { cout << " C "; }
}
int win()
{
 if (fc == 3 && fm == 3) { return 0; }  
 else { return 1; }  
}
void solution()
{
 while (win())
 {
  if (flag == 0){
   switch (sel)
   {
   case 1:display('C', ' ');
    ic++;
    break;
   case 2:display('C', 'M');
    ic++; im++;    
    break;   
   }
   
   if (((im - 2) >= ic && (fm + 2) >= fc) || (im - 2) == 0)
   {
    im = im - 2;
    sel = 1;
    display('M', 'M');
    flag = 1;
   }
   else if ((ic - 2) < im && (fm == 0 || (fc + 2) <= fm) || im == 0)
   {
    ic = ic - 2;
    sel = 2;
    display('C', 'C');
    flag = 1;
   }
   else if ((ic--) <= (im--) && (fm++) >= (fc++))
   {
    ic = ic - 1;
    im = im - 1;
    sel = 3;
    display('M', 'C');
    flag = 1;
   }
  }
  
  
  else
  {
   switch (sel)
   {
   case 1:display('M', 'M');
    fm = fm + 2;
    break;
   case 2:display('C', 'C');
    fc = fc + 2;
    break;   
   case 3:display('M', 'C');
    fc = fc + 1;
    fm = fm + 1;
    break;
   }
   
   if (win())
   {
    if (((fc > 1 && fm == 0) || im == 0))
    {
     fc--;
     sel = 1;
     display('C', ' ');
     flag = 0;
    }
    else if ((ic + 2) > im)
    {
     fc--; fm--;
     sel = 2;
     display('C', 'M');
     flag = 0;
    }
   }
  }
 }
}


int main()
{
 cout << "MISSIONARIES AND CANNIBAL";
 display(' ', ' ');
 solution();
 display(' ', ' ');
 cout << "\n\n";
 
 return 0;
}

PART B
To solve 8 puzzle problem.
from simpleai.search import astar, SearchProblem
GOAL='''1-2-3
4-5-6
7-8-e'''
print("Goal state is : ")
print(GOAL)
INITIAL='''4-1-2
7-e-3
8-5-6'''
print("Initial state is : ")
print(INITIAL)
def list_to_string(mylist):
return "\n".join(['-'.join(row)for row in mylist])
def string_to_list(mystring):
return [row.split('-') for row in mystring.split('\n')]
def find_location(rows, element_to_find):
for ir, row in enumerate(rows):
for ic, element in enumerate(row):
if element==element_to_find:
return ir, ic
#list[0]=list[1,2,3]
#list[1]=list[4,5,6]
#list[2]=list[7,8,e]
goal_positions={}
rows_goal=string_to_list(GOAL)
for number in '12345678e':
goal_positions[number]=find_location(rows_goal, number)
print(goal_positions)
class EightPuzzleProblem(SearchProblem):
def actions(self, state):
rows=string_to_list(state)
re, ce=find_location(rows, 'e')
myaction=[]
if re>0:
myaction.append(rows[re-1] [ce])
if re<2:
myaction.append(rows[re+1] [ce])
if ce>0:
myaction.append(rows[re] [ce-1])
if ce<2:
myaction.append(rows[re] [ce+1])
return myaction
def result(self, state, action):
rows=string_to_list(state)
re, ce=find_location(rows, 'e')
rn, cn=find_location(rows, action)
rows[re][ce], rows[rn][cn]=rows[rn][cn], rows[re][ce]
return list_to_string(rows)
def is_goal(self, state):
return state==GOAL
def cost(self, state1, action, state2):
return 1
def heuristic(self, state):
rows=string_to_list(state)
distance=0
for number in '12345678e':
rn, cn=find_location(rows, number)
rgoal, cgoal=goal_positions[number]
distance+=abs(rn-rgoal)+abs(cn-cgoal)
return distance
#Driver Code
result=astar(EightPuzzleProblem(INITIAL))
print(result)
for action, state in result.path():
print("Move number", action)
print(state)
