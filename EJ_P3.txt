PRACTICAL 3
IMPLEMENT THE SERVLET IO AND FILE APPLICATIONS

PART A – i
AIM: Create a Servlet application to upload a file.
index.html:
<!DOCTYPE html>
<html>
<head>
<title>File upload example</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
<form action="FileUpload" method="post" enctype="multipart/form-data">
<h1>Uploading the file</h1>
Select a file : <input type="file" name="file" id="file"><br>
Destination : <input type="text" name="destination" value="" ><br>
<input type="submit" value="UPLOAD" name="upload" id="upload">
</form>
</body>
</html>
FileUpload.java:
package uploadDemo;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;
@MultipartConfig
public class FileUpload extends HttpServlet {
@Override
protected void service(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException {
response.setContentType("text/html");
response.setContentType("text/html;charset=UTF-8");
PrintWriter out = response.getWriter();
String path = request.getParameter("destination");
Part filePart = request.getPart("file");
String filename = filePart.getSubmittedFileName().toString();
Path path1 = Paths.get(filename);
Path dname = path1.getFileName();
out.print("<br><br><hr> Full File Name (with Path): " + filename);
out.println("<br><br><hr> File Name: " + dname);
OutputStream os = null;
InputStream is = null;
try {
os = new FileOutputStream(new File(path + File.separator + dname));
is = filePart.getInputStream();
int read = 0;
while ((read = is.read()) != -1) {
os.write(read);
}
out.println("<br><br><br><hr>File Uploaded Sucessfully...!!!");
} catch (FileNotFoundException e) {
out.print(e);
}
}
}

PART A – ii
AIM: Create a Servlet application to download a file.
index.html:
<!DOCTYPE html>
<html>
<head>
<title>Download files</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
<h1>File Download Application</h1>
Click<a href="DownloadServlet?filename=2A.txt">Text</a><br><br>
Click<a href="DownloadServlet?filename=1.png">Image</a><br><br>
Click<a href="DownloadServlet?filename=Aims.pdf">Sample PDF File</a>
</body>
</html>
DownloadServlet.java:
package demoD;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
public class DownloadServlet extends HttpServlet {
@Override
protected void service(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException {
response.setContentType("text/html;charset=UTF-8");
response.setContentType("text/html;charset=UTF-8");
response.setContentType("APPLICATION/OCTATE-STREAM");
String filename = request.getParameter("filename");
ServletContext context = getServletContext();
InputStream is = context.getResourceAsStream("/" + filename);
PrintWriter out = response.getWriter();
response.setHeader("Content-Diposition", "attachment;filename=\"" + filename + "\"");
int i;
while ((i = is.read()) != -1) {
out.write(i);
}
is.close();
out.close();
}
}

PART C
AIM: Create simple Servlet application to demonstrate NonBlocking Read Operation

FileServlet.java:
package readDemo;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.nio.*;
import java.nio.channels.*;
public class FileRead extends HttpServlet {
 public static void main(String args[]) throws IOException{
 FileInputStream input = new FileInputStream ("D:\\Basil\\EJ\\testin.txt");
 ReadableByteChannel source = input.getChannel();
 FileOutputStream output = new FileOutputStream ("D:\\Basil\\EJ\\testout.txt");
 WritableByteChannel destination = output.getChannel();
 copyData(source, destination);
 source.close();
 destination.close();
 }
 private static void copyData(ReadableByteChannel src, WritableByteChannel dest) throws 
IOException{
 ByteBuffer buffer = ByteBuffer.allocateDirect(20 * 1024);
 while (src.read(buffer) != -1){
 buffer.flip();
 while (buffer.hasRemaining()){
 dest.write(buffer);
 }
 buffer.clear(); // Now the buffer is empty, ready for the filling
 System.out.println("Close");
 }
 }
}