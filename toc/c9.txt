Design a PDA to accept WCWR where w is any string and WR is reverse of that string
and C is a Special symbol.
><<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


import string

class PDA:
    def __init__(self, states, input_alphabet, stack_alphabet, transitions, start_state, start_symbol, accept_states):
        self.states = states
        self.input_alphabet = input_alphabet
        self.stack_alphabet = stack_alphabet
        self.transitions = transitions
        self.start_state = start_state
        self.start_symbol = start_symbol
        self.accept_states = accept_states

    def accepts(self, string):
        stack = [self.start_symbol]
        state = self.start_state
        for symbol in string:
            if (state, symbol, stack[-1]) in self.transitions:
                state, stack_push = self.transitions[(state, symbol, stack[-1])]
                if stack_push != None:
                    stack.append(stack_push)
            elif (state, '', stack[-1]) in self.transitions:
                state, stack_push = self.transitions[(state, '', stack[-1])]
                if stack_push != None:
                    stack.append(stack_push)
                continue
            else:
                return False
        if state in self.accept_states and stack[-1] == self.start_symbol:
            return True
        return False

# define the PDA
states = {'q0', 'q1', 'q2', 'q3', 'q4', 'q5'}
input_alphabet = set(string.ascii_letters)
stack_alphabet = {'C', '#'}
transitions = {
    ('q0', '', '#'): ('q1', '#'),
    ('q1', '', 'C'): ('q2', 'C'),
    ('q1', '', '#'): ('q4', '#'),
    ('q2', '', '#'): ('q3', '#'),
    ('q3', input_alphabet, 'C'): ('q3', 'C'),
    ('q3', '', '#'): ('q5', '#'),
    ('q4', 'C', '#'): ('q5', '#')
}
start_state = 'q0'
start_symbol = '#'
accept_states = {'q5'}

pda = PDA(states, input_alphabet, stack_alphabet, transitions, start_state, start_symbol, accept_states)

# test the PDA
string1 = 'aabbaa'
string2 = 'abccba'

if pda.accepts(string1+'C'+string1[::-1]):
    print(f'{string1}C{string1[::-1]} is accepted')
else:
    print(f'{string1}C{string1[::-1]} is rejected')

if pda.accepts(string2+'C'+string2[::-1]):
    print(f'{string2}C{string2[::-1]} is accepted')
else:
    print(f'{string2}C{string2[::-1]} is rejected')
