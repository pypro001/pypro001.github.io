#Write a program for generating derivation sequence / language for #the given sequence of
#productions


def generate_sequence(string,productions):
    new_string=""
    for char in string:
        if char in productions:
            new_string+=productions[char]
        else:
            new_string+=char
    return new_string
productions={'s':'aAb','A':'aAb'}
string ='s'
for i in range(4):
    print(string)
    string=generate_sequence(string,productions)
    x=string.replace("A","");
    print("final output :"+x)

<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Generate derivation sequence from a given sequence of productions
vector<string> generate_derivation_sequence(vector<string> productions, string input) {
    vector<string> derivation_sequence;

    // Add the input string as the first step in the derivation sequence
    derivation_sequence.push_back(input);

    // Iterate through the productions until no more non-terminals can be replaced
    bool changed = true;
    while (changed) {
        changed = false;
        for (int i = 0; i < derivation_sequence.back().size(); i++) {
            // Find the first non-terminal in the current string
            if (isupper(derivation_sequence.back()[i])) {
                for (string production : productions) {
                    // Replace the non-terminal with the right-hand side of a matching production
                    if (production[0] == derivation_sequence.back()[i]) {
                        string new_string = derivation_sequence.back();
                        new_string.replace(i, 1, production.substr(3));
                        derivation_sequence.push_back(new_string);
                        changed = true;
                        break;
                    }
                }
            }
            if (changed) {
                break;
            }
        }
    }

    return derivation_sequence;
}

int main() {
    vector<string> productions = {"S -> aS", "S -> bA", "A -> cA", "A -> d"};
    string input = "abccd";

    vector<string> derivation_sequence = generate_derivation_sequence(productions, input);

    // Print the derivation sequence
    for (string step : derivation_sequence) {
        cout << step << endl;
    }

    return 0;
}


<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>