#include <iostream>
#include <string>
#include <vector>
#include <map>

using namespace std;

// A production rule in the form of a -> b
struct Production {
    char left;
    string right;
};

// A context-free grammar with a start symbol and a set of production rules
class Grammar {
public:
    char start;
    vector<Production> rules;
};

// Generate a derivation sequence for a given string and grammar
void generateDerivationSequence(Grammar grammar, string input) {
    map<char, vector<string>> ruleMap;
    for (Production rule : grammar.rules) {
        ruleMap[rule.left].push_back(rule.right);
    }
    vector<string> derivations;
    derivations.push_back(string(1, grammar.start));
    for (int i = 0; i < input.length(); i++) {
        char currentSymbol = input[i];
        vector<string> currentDerivations = derivations;
        derivations.clear();
        for (string derivation : currentDerivations) {
            if (derivation[0] == currentSymbol) {
                derivations.push_back(derivation);
            }
            else if (ruleMap.find(derivation[0]) != ruleMap.end()) {
                for (string production : ruleMap[derivation[0]]) {
                    derivations.push_back(production + derivation.substr(1));
                }
            }
        }
    }
    for (string derivation : derivations) {
        cout << derivation << endl;
    }
}

// Example usage
int main() {
    Grammar grammar = {
        'S',
        {
            {'S', "aS"},
            {'S', "bS"},
            {'S', ""}
        }
    };
    string input = "aabbb";
    generateDerivationSequence(grammar, input);
    return 0;
}
